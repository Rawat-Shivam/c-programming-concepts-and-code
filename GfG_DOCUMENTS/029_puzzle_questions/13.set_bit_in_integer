


Count set bits in an integer
Write an efficient program to count number of 1s in binary representation of an integer.

Examples :

Input : n = 6
Output : 2
Binary representation of 6 is 110 and has 2 set bits

Input : n = 13
Output : 3
Binary representation of 13 is 1101 and has 3 set bits








2. Brian Kernighan’s Algorithm:
Subtracting 1 from a decimal number flips all the bits after the rightmost set bit(which is 1) including the rightmost set bit.
for example :
10 in binary is 00001010
9 in binary is 00001001
8 in binary is 00001000
7 in binary is 00000111
So if we subtract a number by 1 and do bitwise & with itself (n & (n-1)), we unset the rightmost set bit. If we do n & (n-1) in a loop and count the no of times loop executes we get the set bit count.
The beauty of this solution is the number of times it loops is equal to the number of set bits in a given integer.

 
   1  Initialize count: = 0
   2  If integer n is not zero
      (a) Do bitwise & with (n-1) and assign the value back to n
          n: = n&(n-1)
      (b) Increment count by 1
      (c) go to step 2
   3  Else return count
 
Implementation of Brian Kernighan’s Algorithm:


#include <stdio.h> 
unsigned int countSetBits(int n) 
{ 
	unsigned int count = 0; 
	while (n) { 
		n &= (n - 1); 
		count++; 
	} 
	return count; 
} 
int main() 
{ 
	int i = 9; 
	printf("%d", countSetBits(i)); 
	getchar(); 
	return 0; 
} 





Recursive Approach :

#include <bits/stdc++.h> 
using namespace std; 
int countSetBits(int n) 
{ 
	if (n == 0) 
		return 0; 
	else
		return 1 + countSetBits(n & (n - 1)); 
} 
int main() 
{ 
	int n = 9; 
	cout << countSetBits(n); 
	return 0; 
} 















1. Simple Method Loop through all bits in an integer, check if a bit is set and if it is then increment the set bit count. See below program.


// C program to Count set 
// bits in an integer 
#include <stdio.h> 

/* Function to get no of set bits in binary 
representation of positive integer n */
unsigned int countSetBits(unsigned int n) 
{ 
	unsigned int count = 0; 
	while (n) { 
		count += n & 1; 
		n >>= 1; 
	} 
	return count; 
} 
/* Program to test function countSetBits */
int main() 
{ 
	int i = 9; 
	printf("%d", countSetBits(i)); 
	return 0; 
} 
Output :
2
Time Complexity: (-)(logn) (Theta of logn)






Recursive Approach :

#include <bits/stdc++.h> 
using namespace std; 
int countSetBits(int n) 
{ 
	if (n == 0) 
		return 0; 
	else
		// if last bit set add 1 else add 0 
		return (n & 1) + countSetBits(n >> 1); 
} 
int main() 
{ 
	int n = 9; 
	cout << countSetBits(n); 
	return 0; 
} 



























