
Functions that are executed before and after main() in C
With GCC family of C compilers, we can mark some functions to execute before and after main(). So some startup code can be executed before main() starts, and some cleanup code can be executed after main() ends. For example, in the following program, myStartupFun() is called before main() and myCleanupFun() is called after main().

#include<stdio.h> 
  
/* Apply the constructor attribute to myStartupFun() so that it 
    is executed before main() */
void myStartupFun (void) __attribute__ ((constructor)); 
  
/* Apply the destructor attribute to myCleanupFun() so that it 
   is executed after main() */
void myCleanupFun (void) __attribute__ ((destructor)); 
/* implementation of myStartupFun */
void myStartupFun (void) 
{ 
    printf ("startup code before main()\n"); 
} 
/* implementation of myCleanupFun */
void myCleanupFun (void) 
{ 
    printf ("cleanup code after main()\n"); 
} 
int main (void) 
{ 
    printf ("hello\n"); 
    return 0; 
} 
Output:
startup code before main()
hello
cleanup code after main()

Like the above feature, GCC has added many other interesting features to standard C language.


The important thing to note is, there is no return type for fun(), the program still compiles and runs fine in most of the C compilers. In C, if we do not specify a return type, compiler assumes an implicit return type as int. However, C99 standard doesn’t allow return type to be omitted even if return type is int. This was allowed in older C standard C89.

n C, functions are global by default. The “static” keyword before a function name makes it static. For example, below function fun() is static.
static int fun(void) 
{ 
  printf("I am a static function "); 
} 
Unlike global functions in C, access to static functions is restricted to the file where they are declared. Therefore, when we want to restrict access to functions, we make them static. Another reason for making functions static can be reuse of the same function name in other files.


For example, if we store following program in one file file1.c

/* Inside file1.c */ 
static void fun1(void) 
{ 
  puts("fun1 called"); 
} 
And store following program in another file file2.c
/* Iinside file2.c  */ 
int main(void) 
{ 
  fun1();  
  getchar(); 
  return 0;   
} 
Now, if we compile the above code with command “gcc file2.c file1.c”, we get the error “undefined reference to `fun1’” . This is because fun1() is declared static in file1.c and cannot be used in file2.c.



