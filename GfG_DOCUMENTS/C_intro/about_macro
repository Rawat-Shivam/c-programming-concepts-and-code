

preprocessor takes a C program and produces another C program without any #.
Macros are expanded by the preprocessor, which is a separate program that runs before the compiler proper. Macros perform a simple text substitution
Macros are expanded by the preprocessor, which acts on tokens, after lexical analysis. Thus, a macro only expands to whole tokens,

Define the macro after you define the function. when function name and macro is same.

1) When we use include directive,  the contents of included header file (after preprocessing) are copied to the current file.
Angular brackets < and > instruct the preprocessor to look in the standard folder where all header files are held.  Double quotes “ and “ instruct the preprocessor to look into the current folder (current directory).
2) When we use define for a constant, the preprocessor produces a C program where the defined constant is searched and matching tokens are replaced with the given expression.




3) The macros can take function like arguments, the arguments are not checked for data type. For example, the following macro INCREMENT(x) can be used for x of any data type.
//////////////////////////////////////////////////////////////////////
#include <stdio.h>
#define INCREMENT(x) ++x
int main()
{
    char *ptr = "GeeksQuiz";
    int x = 10;
    printf("%s  ", INCREMENT(ptr));
    printf("%d", INCREMENT(x));
    return 0;
}
//////////////////////////////////////////////////////////////////////
Output:
eeksQuiz  11


4) The macro arguments are not evaluated before macro expansion. For example, consider the following program
//////////////////////////////////////////////////////////////////////
#include <stdio.h>
#define MULTIPLY(a, b) a*b
int main()
{
    // The macro is expended as 2 + 3 * 3 + 5, not as 5*8
    printf("%d", MULTIPLY(2+3, 3+5));
    return 0;
}
//////////////////////////////////////////////////////////////////////
 Output: 16

The previous problem can be solved using following program
//////////////////////////////////////////////////////////////////////
#include <stdio.h>
//here, instead of writing a*a we write (a)*(b)
#define MULTIPLY(a, b) (a)*(b)
int main()
{
    // The macro is expended as (2 + 3) * (3 + 5), as 5*8
    printf("%d", MULTIPLY(2+3, 3+5));
    return 0;
}
//////////////////////////////////////////////////////////////////////
Output: 40



5) The tokens passed to macros can be concatenated using operator ## called Token-Pasting operator.
//////////////////////////////////////////////////////////////////////
#include <stdio.h> 
#define merge(a, b) a##b 
int main() 
{ 
    printf("%d ", merge(12, 34)); 
} 
//////////////////////////////////////////////////////////////////////
Output: 1234


6) A token passed to macro can be converted to a string literal by using # before it.
//////////////////////////////////////////////////////////////////////
#include <stdio.h> 
#define get(a) #a 
int main() 
{ 
    // GeeksQuiz is changed to "GeeksQuiz" 
    printf("%s", get(GeeksQuiz)); 
} 
//////////////////////////////////////////////////////////////////////
Output: GeeksQuiz


7) The macros can be written in multiple lines using ‘\’. The last line doesn’t need to have ‘\’.
//////////////////////////////////////////////////////////////////////
#include <stdio.h> 
#define PRINT(i, limit) while (i < limit) \ 
                        { \ 
                            printf("GeeksQuiz "); \ 
                            i++; \ 
                        } 
int main() 
{ 
    int i = 0; 
    PRINT(i, 3); 
    return 0; 
} 
//////////////////////////////////////////////////////////////////////
Output: GeeksQuiz GeeksQuiz GeeksQuiz


8) The macros with arguments should be avoided as they cause problems sometimes. And Inline functions should be preferred as there is type checking parameter evaluation in inline functions. From C99 onward, inline functions are supported by C language also.
For example consider the following program. From first look the output seems to be 1, but it produces 36 as output.

//////////////////////////////////////////////////////////////////////
#include <stdio.h> 
  
#define square(x) x*x 
int main() 
{ 
    // Expanded as 36/6*6 
    int x = 36/square(6);  
    printf("%d", x); 
    return 0; 
} 
//////////////////////////////////////////////////////////////////////
Output:
36

If we use inline functions, we get the expected output. Also, the program given in point 4 above can be corrected using inline functions.
//////////////////////////////////////////////////////////////////////
#include <stdio.h> 
  
static inline int square(int x) { return x*x; } 
int main() 
{ 
int x = 36/square(6); 
printf("%d", x); 
return 0; 
} 
//////////////////////////////////////////////////////////////////////
Output:
1


9) Preprocessors also support if-else directives which are typically used for conditional compilation.
//////////////////////////////////////////////////////////////////////
int main() 
{ 
#if VERBOSE >= 2 
  printf("Trace Message"); 
#endif 
} 
//////////////////////////////////////////////////////////////////////
Output:
No Output


10) A header file may be included more than one time directly or indirectly, this leads to problems of redeclaration of same variables/functions. To avoid this problem, directives like defined, ifdef and ifndef are used.


11) There are some standard macros which can be used to print program file (__FILE__), Date of compilation (__DATE__), Time of compilation (__TIME__) and Line Number in C code (__LINE__)
//////////////////////////////////////////////////////////////////////
#include <stdio.h> 
  
int main() 
{ 
   printf("Current File :%s\n", __FILE__ ); 
   printf("Current Date :%s\n", __DATE__ ); 
   printf("Current Time :%s\n", __TIME__ ); 
   printf("Line Number :%d\n", __LINE__ ); 
   return 0; 
} 
//////////////////////////////////////////////////////////////////////

12) We can remove already defined macros using :
#undef MACRO_NAME












