
Pointers are used for storing address of dynamically allocated arrays

// 1st program to show that array and pointers are different 
#include <stdio.h> 
int main() 
{ 
   int arr[] = {10, 20, 30, 40, 50, 60}; 
   int *ptr = arr; 
   // sizof(int) * (number of element in arr[]) is printed 
   printf("Size of arr[] %ld\n", sizeof(arr)); 
  
   // sizeof a pointer is printed which is same for all type  
   // of pointers (char *, void *, etc) 
   printf("Size of ptr %ld", sizeof(ptr)); 
   return 0; 
} 
Compiler Error: incompatible types when assigning to 
              type 'int[2]' from type 'int *' 



Assigning any address to an array variable(array name not index) is not allowed.
// IInd program to show that array and pointers are different 
#include <stdio.h> 
int main() 
{ 
   int arr[] = {10, 20}, x = 10; 
   int *ptr = &x; // This is fine 
   arr = &x;  // Compiler Error 
   return 0; 
}



1) the sizeof operator
o sizeof(array) returns the amount of memory used by all elements in array
o sizeof(pointer) only returns the amount of memory used by the pointer variable itself

2) the & operator
o &array is an alias for &array[0] and returns the address of the first element in array
o &pointer returns the address of pointer


3) a string literal initialization of a character array
o char array[] = “abc” sets the first four elements in array to ‘a’, ‘b’, ‘c’, and ‘\0’
o char *pointer = “abc” sets pointer to the address of the “abc” string (which may be stored in read-only memory and thus unchangeable)

4) Pointer variable can be assigned a value whereas array variable cannot be.
int a[10];
int *p; 
p=a; /*legal*/
a=p; /*illegal*/ 

5) Arithmetic on pointer variable is allowed.
p++; /*Legal*/
a++; /*illegal*/ 


