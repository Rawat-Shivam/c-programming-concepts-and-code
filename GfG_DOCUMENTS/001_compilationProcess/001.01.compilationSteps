

			001.01.compilationSteps


What goes inside the compilation process?
Compiler converts a C program into an executable. There are four phases for a C program to become an executable:
Pre-processing
Compilation
Assembly
Linking

*************************************************************************************
 -v                       Display the programs invoked by the compiler.

-save-temps              Do not delete intermediate files.
-time                    Time the execution of each subprocess
-E                       Preprocess only; do not compile, assemble or link.
-S                       Compile only; do not assemble or link.
-c                       Compile and assemble, but do not link.
-shared                  Create a shared library.

 -o <file>                Place the output into <file>.

****************************************************************************************

By executing below command, We get the all intermediate files in the current directory along with the executable:

	 $gcc –Wall –save-temps filename.c –o filename 





Let us one by one see what these intermediate files contain.

Pre-processing
This is the first phase through which source code is passed. This phase include:
Removal of Comments
Expansion of Macros
Expansion of the included files.
Conditional compilation

The preprocessed output is stored in the filename.i. Let’s see what’s inside filename.i: using $vim filename.i
In the above output, source file is filled with lots and lots of info, but at the end our code is preserved.
Analysis:
printf contains now a + b rather than add(a, b) that’s because macros have expanded.
Comments are stripped off.
#include<stdio.h> is missing instead we see lots of code. So header files has been expanded and included in our source file.


Compiling
The next step is to compile filename.i and produce an; intermediate compiled output file filename.s. This file is in assembly level instructions. Let’s see through this file using $vim filename.s


Assembly
In this phase the filename.s is taken as input and turned into filename.o by assembler. This file contain machine level instructions. At this phase, only existing code is converted into machine language, the function calls like printf() are not resolved. Let’s view this file using $vim filename.o

Linking
This is the final phase in which all the linking of function calls with their definitions are done. Linker knows where all these functions are implemented. Linker does some extra work also, it adds some extra code to our program which is required when the program starts and ends. For example, there is a code which is required for setting up the environment like passing command line arguments. This task can be easily verified by using $size filename.o and $size filename. Through these commands, we know that how output file increases from an object file to an executable file. This is because of the extra code that linker adds with our program.

