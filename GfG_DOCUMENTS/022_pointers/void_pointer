
Void pointer
Void pointer is a specific pointer type – void * – a pointer that points to some data location in storage, which doesn’t have any specific type. Void refers to the type. Basically the type of data that it points to is can be any. If we assign address of char data type to void pointer it will become char Pointer, if int data type then int pointer and so on. Any pointer type is convertible to a void pointer hence it can point to any value.
Important Points

void pointers cannot be dereferenced. It can however be done using typecasting the void pointer
Pointer arithmetic is not possible on pointers of void due to lack of concrete value and thus size.

#include<stdlib.h> 
int main() 
{ 
    int x = 4; 
    float y = 5.5; 
    
    //A void pointer 
    void *ptr; 
    ptr = &x; 
  
    // (int*)ptr - does type casting of void  
    // *((int*)ptr) dereferences the typecasted  
    // void pointer variable. 
    printf("Integer variable is = %d", *( (int*) ptr) ); 
  
    // void pointer is now float 
    ptr = &y;  
    printf("\nFloat variable is= %f", *( (float*) ptr) ); 
  
    return 0; 
}

Advantages of void pointers:
1) malloc() and calloc() return void * type and this allows these functions to be used to allocate memory of any data type (just because of void *)
we must explicitly typecast return value of malloc

2) void pointers in C are used to implement generic functions in C.

How does “void *” differ in C and C++?
C allows a void* pointer to be assigned to any pointer type without a cast, whereas C++ does not

void* ptr; 
int *i = ptr; /* Implicit conversion from void* to int* */

or similarly:

int *j = malloc(sizeof(int) * 5); /* Implicit conversion from void* to int* */

In order to make the code compile in both C and C++, one must use an explicit cast:
void* ptr; 
int *i = (int *) ptr; 
int *j = (int *) malloc(sizeof(int) * 5); 

Some Interesting Facts:
1) void pointers cannot be dereferenced. For example the following program doesn’t compile.

#include<stdio.h> 
int main() 
{ 
	int a = 10; 
	void *ptr = &a; 
	printf("%d", *ptr); 
	return 0; 
} 

Output:
Compiler Error: 'void*' is not a pointer-to-object type 

The following program compiles and runs fine.
#include<stdio.h> 
int main() 
{ 
	int a = 10; 
	void *ptr = &a; 
	printf("%d", *(int *)ptr); 
	return 0; 
} 
Output:
10

2) The C standard doesn’t allow pointer arithmetic with void pointers. However, in GNU C it is allowed by considering the size of void is 1. For example the following program compiles and runs fine in gcc.
#include<stdio.h> 
int main() 
{ 
    int a[2] = {1, 2}; 
    void *ptr = &a; 
    ptr = ptr + sizeof(int); 
    printf("%d", *(int *)ptr); 
    return 0; 
} 
Output:
2
Note that the above program may not work in other compilers.


