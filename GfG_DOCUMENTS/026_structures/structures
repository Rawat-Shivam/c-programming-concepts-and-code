

What is a structure?
A structure is a user defined data type in C/C++. A structure creates a data type that can be used to group items of possibly different types into a single type.

struct Point 
{ 
   int x, y; 
} p1;  // The variable p1 is declared with 'Point' 
  
struct Point 
{ 
   int x, y; 
};  
int main() 
{ 
   struct Point p1;  // The variable p1 is declared like a normal variable 
}

How to initialize structure members?
Structure members cannot be initialized with declaration. For example the following C program fails in compilation.

struct Point
{
   int x = 0;  // COMPILER ERROR:  cannot initialize members here
   int y = 0;  // COMPILER ERROR:  cannot initialize members here
};

The reason for above error is simple, when a datatype is declared, no memory is allocated for it. Memory is allocated only when variables are created.



Structure members can be initialized using curly braces ‘{}’. For example, following is a valid initialization.
struct Point 
{ 
   int x, y; 
};  
int main() 
{ 
   struct Point p1 = {0, 1};  
}


How to access structure elements?
Structure members are accessed using dot (.) operator.
#include<stdio.h> 
struct Point 
{ 
   int x, y; 
}; 
int main() 
{ 
   struct Point p1 = {0, 1}; 
   p1.x = 20; 
   printf ("x = %d, y = %d", p1.x, p1.y); 
   return 0; 
}
Output:
x = 20, y = 1


What is designated Initialization?
Designated Initialization allows structure members to be initialized in any order. This feature has been added in C99 standard.
#include<stdio.h> 
struct Point 
{ 
   int x, y, z; 
}; 
int main() 
{ 
   // Examples of initialization using designated initialization 
   struct Point p1 = {.y = 0, .z = 1, .x = 2}; 
   struct Point p2 = {.x = 20}; 
   printf ("x = %d, y = %d, z = %d\n", p1.x, p1.y, p1.z); 
   printf ("x = %d", p2.x); 
   return 0; 
} 
Output:
x = 2, y = 0, z = 1
x = 20
This feature is not available in C++ and works only in C.


What is an array of structures?
Like other primitive data types, we can create an array of structures.

#include<stdio.h> 
struct Point 
{ 
   int x, y; 
}; 
  
int main() 
{ 
   // Create an array of structures 
   struct Point arr[10]; 
   // Access array members 
   arr[0].x = 10; 
   arr[0].y = 20; 
   printf("%d %d", arr[0].x, arr[0].y); 
   return 0; 
} 
Output:
10 20


What is a structure pointer?
Like primitive types, we can have pointer to a structure. If we have a pointer to structure, members are accessed using arrow ( -> ) operator.

#include<stdio.h> 
  
struct Point 
{ 
   int x, y; 
}; 
  
int main() 
{ 
   struct Point p1 = {1, 2}; 
   // p2 is a pointer to structure p1 
   struct Point *p2 = &p1; 
   // Accessing structure members using structure pointer 
   printf("%d %d", p2->x, p2->y); 
   return 0; 
}
Output:
1 2



