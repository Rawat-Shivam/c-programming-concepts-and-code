
					003.01.storage_classes

 C doesn’t allow multiple storage class specifiers for a variable


go and see program : /home/rawat/EMBLOGIC/C/GfG_DOCUMENTS/003_storageClasses/storageClasses/registerInLocalSpaceOnly.c

To restrict access to the current file only, global variables can be marked as static.

register keyword can be used with pointer variables. Obviously, a register can have address of a memory location.


Static variables should not be declared inside structure. The reason is C compiler requires the entire structure elements to be placed together (i.e.) memory allocation for structure members should be contiguous. It is possible to declare structure inside the function (stack segment) or allocate memory dynamically(heap segment) or it can be even global (BSS or data segment). Whatever might be the case, all structure members should reside in the same memory segment because the value for the structure element is fetched by counting the offset of the element from the beginning address of the structure. Separating out one member alone to data segment defeats the purpose of static variable and it is possible to have an entire structure as static.


static variables can only be initialized using constant literals. For example, following program fails in compilation
All objects with static storage duration must be initialized (set to their initial values) before execution of main() starts. So a value which is not known at translation time cannot be used for initialization of static variables.
//////////////////////////////////////////////////////////////////////////
extern int var = 0;//warning: ‘var’ initialized and declared ‘extern’ 
int main(void) 
{ 
 var = 10; 
 return 0; 
} 
//////////////////////////////////////////////////////////////////////////
Do you think this program will work? Well, here comes another surprise from C standards. They say that..if a variable is only declared and an initializer is also provided with that declaration, then the memory for that variable will be allocated–in other words, that variable will be considered as defined. Therefore, as per the C standard, this program will compile successfully and work.


static variables preserve their previous value in their previous scope and are not initialized again in the new scope

 A static int variable remains in memory while the program is running. A normal or auto variable is destroyed when a function call where the variable was declared is over.

*******************************************************************************************************************
BUT the local variable name is deallocated the memory adderess,but not the value at the memeory address if we try to print the value at that memeory.we will get the value . that is stack frame range for a function is deallocated if the same function is called again ...and by chance same stck frame range is provided so we will find the previous value at that memory which will be garbage for us.**********************************************************************************************************************
 we can use static int to count a number of times a function is called, but an auto variable can’t be used for this purpose.Static variables are allocated memory in data segment, not stack segment. Static variables (like global variables) are initialized as 0 if not initialized explicitly.n C, static variables can only be initialized using constant literals. For example, following program fails in compilation

go and see program : /home/rawat/EMBLOGIC/C/GfG_DOCUMENTS/003_storageClasses/storageClasses/staticMustBeInitializedUsingConstantLiteral.c

Please note that this condition doesn’t hold in C++. So if you save the program as a C++ program, it would compile \and run fine.


Static global variables and functions are also possible in C/C++. The purpose of these is to limit scope of a variable or function to a file.


Unlike global functions in C, access to static functions is restricted to the file where they are declared. Therefore, when we want to restrict access to functions, we make them static. Another reason for making functions static can be reuse of the same function name in other files.

the extern keyword applies to C variables (data objects) and C functions. Basically, the extern keyword extends the visibility of the C variables and C functions. That’s probably the reason why it was named extern.


Declaration of a variable or function simply declares that the variable or function exists somewhere in the program, but the memory is not allocated for them. The declaration of a variable or function serves an important role–it tells the program what its type is going to be. In case of function declarations, it also tells the program the arguments, their data types, the order of those arguments, and the return type of the function. So that’s all about the declaration.

Coming to the definition, when we define a variable or function, in addition to everything that a declaration does, it also allocates memory for that variable or function. Therefore, we can think of definition as a superset of the declaration (or declaration as a subset of definition).

It turns out that when a function is declared or defined, the extern keyword is implicitly assumed. When we write.

    int foo(int arg1, char arg2);
The compiler treats it as:

    extern int foo(int arg1, char arg2);

Since the extern keyword extends the the function’s visibility to the whole program, the function can be used (called) anywhere in any of the files of the whole program, provided those files contain a declaration of the function. (With the declaration of the function in place, the compiler knows the definition of the function exists somewhere else and it goes ahead and compiles the file). So that’s all about extern and functions.

extern int var;
Here, an integer type variable called var has been declared (it hasn’t been defined yet, so no memory allocation for var so far)
int var;
In this line, an integer type variable called var has been both declared and defined (remember that definition is the superset of declaration). Since this is a definition, the memory for var is also allocated. Now here comes the surprise. When we declared/defined a function, we saw that the extern keyword was present implicitly. But this isn’t the case with variables. If it were, memory would never be allocated for them. Therefore, we need to include the extern keyword explicitly when we want to declare variables without defining them. Also, as the extern keyword extends the visibility to the whole program, by using the extern keyword with a variable, we can use the variable anywhere in the program provided we include its declaration the variable is defined somewhere.


//////////////////////////////////////////////////////////////////////////
int var; 
int main(void) 
{ 
   var = 10; 
   return 0; 
} 
This program compiles successfully. var is defined (and declared implicitly) globally.



//////////////////////////////////////////////////////////////////////////
extern int var; 
int main(void) 
{ 
  return 0; 
} 
This program compiles successfully. Here var is declared only. Notice var is never used so no problems arise.


//////////////////////////////////////////////////////////////////////////
extern int var; 
int main(void) 
{ 
  var = 10; 
  return 0; 
} 
This program throws an error in compilation because var is declared but not defined anywhere. Essentially, the var isn’t allocated any memory. And the program is trying to change the value to 10 of a variable that doesn’t exist at all.

//////////////////////////////////////////////////////////////////////////
#include "somefile.h" 
extern int var; 
int main(void) 
{ 
 var = 10; 
 return 0; 
} 
Assuming that somefile.h contains the definition of var, this program will compile successfully

A declaration can be done any number of times of extern variable  but definition only once.
When extern is used with a variable, it’s only declared, not defined.
***********************************
As an exception, when an extern variable is declared with initialization, it is taken as the definition of the variable as well.
**************************************


Registers are faster than memory to access, so the variables which are most frequently used in a C program can be put in registers using register keyword. The keyword register hints to compiler that a given variable can be put in a register. It’s compiler’s choice to put it in a register or not


If you use & operator with a register variable then compiler may give an error or warning (depending upon the compiler you are using), because when we say a variable is a register, it may be stored in a register instead of memory and accessing address of a register is invalid. 

 There is no limit on number of register variables in a C program, but the point is compiler may put some variables in register and some not.


// PROGRAM 1 
///////////////////////////////////////////////////////////////////////
#include <stdio.h> 
#include <stdlib.h> 
  
int main(void) 
{ 
   static int *p = (int*)malloc(sizeof(p)); 
   *p = 10; 
   printf("%d", *p); 
} 
///////////////////////////////////////////////////////////////////////
main.c: In function ‘main’:
main.c:7:17: error: initializer element is not constant
 static int *p = (int*)malloc(sizeof(p));

// PROGRAM 2 
///////////////////////////////////////////////////////////////////////
#include <stdio.h> 
#include <stdlib.h> 
int *p = (int*)malloc(sizeof(p)); 
  
int main(void) 
{ 
    *p = 10; 
    printf("%d", *p); 
} 
///////////////////////////////////////////////////////////////////////
main.c:4:10: error: initializer element is not constant
 int *p = (int*)malloc(sizeof(p));


In C, static and global variables are initialized by the compiler itself. Therefore, they must be initialized with a constant value.

A static variable needs to be initialized with constant value. But here the static variable is a pointer type and to initialize it dynamic memory allocation is attempted, which will give an address from heap segment.
According to process memory layout, the static variable has to be stored in Data segment and in above code the law is getting violated by assigning address to static variable from heap segment. Hence it will give error.


///////////////////////////////////////////////////////////////////////
#include<stdio.h>
#include<stdlib.h>
int main()
{
static int *ptr = 0 ;
ptr = (int*)malloc(4);
*ptr = 10;
printf("%d\n",*ptr);
}
output:10

///////////////////////////////////////////////////////////////////////
#include <stdio.h> 
int fun(int x) 
{ 
    return (x+5); 
} 
int y = fun(20); 
int main() 
{ 
    printf("%d ", y); 
}
C++ : output: 25
C:error
main.c:7:9: error: initializer element is not constant
 int y = fun(20);
         ^~~
 the value returned by f() is not dependent on who is calling it. f() always returns the value of global variable x.

///////////////////////////////////////////////////////////////////////
# include <stdio.h> 
int x = 0; 
int f() 
{ 
   return x; 
} 
int g() 
{ 
   int x = 1; 
   return f(); 
} 
int main() 
{ 
  printf("%d", g()); 
  printf("\n"); 
  getchar(); 
} 




