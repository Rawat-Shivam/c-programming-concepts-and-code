
Write a C macro PRINT(x) which prints x
At the first look, it seems that writing a C macro which prints its argument is childâ€™s play. Following program should work i.e. it should print x

#define PRINT(x) (x) 
int main() 
{  
  printf("%s",PRINT(x)); 
  return 0; 
} 
But it would issue compile error because the data type of x, which is taken as variable by the compiler, is unknown.

But if we know one of lesser known traits of C language, writing such a macro is really a childâ€™s play. ðŸ™‚ In C, thereâ€™s a # directive, also called â€˜Stringizing Operatorâ€™, which does this magic. Basically # directive converts its argument in a string

#define PRINT(x) (#x) 
int main() 
{  
  printf("%s",PRINT(x)); 
  return 0; 
}

***************************

#include<stdio.h>
#define PRINT(x) (#x) 
int main() 
{ 
printf("%f",PRINT(5.009)); 
return 0; 
} 

prog.c: In function â€˜mainâ€™:
prog.c:5:8: warning: format â€˜%fâ€™ expects argument of type â€˜doubleâ€™, but argument 2 has type â€˜char *â€™ [-Wformat=]
 printf("%f",PRINT(5.009)); 
        ^
***********************************

