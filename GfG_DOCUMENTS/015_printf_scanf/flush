

Using “ fflush(stdin) ” : Typing “fflush(stdin)” after “scanf()” statement also clears the input buffer but use of it is avoided and is termed to be “undefined” for input stream as per the C++11 standards.



While taking an input string with spaces, the buffer does not get cleared for the next input and considers the previous input for the same. 
A temporary storage area is called buffer. All standard input and output devices contain an input and output buffer.
In standard C/C++, streams are buffered, for example in the case of standard input, when we press the key on keyboard, it isn’t sent to your program, rather it is buffered by operating system till the time is allotted to that program.

How does it effect Programming?
On various occasions you may need to clear the unwanted buffer so as to get the next input in the desired container and not in the buffer of previous variable. For example, in case of C after encountering “scanf()” , if we need to input a character array or character  we require to clear the input buffer or else the desired input is occupied by buffer of previous variable, not by the desired container.On pressing “Enter” (carriage return) on output screen after the first input , , as the buffer of previous variable was the space for new container(as we did’nt clear it) , the program skips the following input of container.



// C Code to explain why not  
// clearing the input buffer 
// causes undesired outputs 
#include<stdio.h> 
int main() 
{ 
    char str[80], ch; 
      
    // Scan input from user -  
    // GeeksforGeeks for example 
    scanf("%s", str); 
      
    // Scan character from user-  
    // 'a' for example 
    ch = getchar(); 
      
    // Printing character array,  
    // prints “GeeksforGeeks”) 
    printf("%s\n", str); 
      
    // This does not print  
    // character 'a' 
    printf("%c", ch); 
      
    return 0; 
} 
Input:
GeeksforGeeks
a

Output:
GeeksforGeeks



the output is not printed as desired. Reason to this is an occupied Buffer. The “\n” character goes remains there in buffer and read as next input.


How can it be resolved?
In case of C :
Using “ while ((getchar()) != ‘\n’); ” : Typing “while ((getchar()) != ‘\n’);” reads the buffer characters till the end and discards them(including newline) and using it after the “scanf()” statement clears the input buffer and allows the input in the desired container.

// C Code to explain why adding  
// "while ( (getchar()) != '\n');" 
// after "scanf()" statement  
// flushes the input buffer 
#include<stdio.h> 
  
int main() 
{ 
    char str[80], ch; 
      
    // scan input from user -  
    // GeeksforGeeks for example 
    scanf("%s", str); 
      
    // flushes the standard input 
    // (clears the input buffer) 
    while ((getchar()) != '\n'); 
      
    // scan character from user -  
    // 'a' for example 
    ch = getchar(); 
      
    // Printing character array,  
    // prints “GeeksforGeeks”) 
    printf("%s\n", str); 
      
    // Printing character a: It  
    // will print 'a' this time 
    printf("%c", ch); 
  
    return 0; 
} 
Input:
GeeksforGeeks
a

Output:
GeeksforGeeks
a






