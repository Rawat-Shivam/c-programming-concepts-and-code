
What is return type of getchar(), fgetc() and getc() ?
In C, return type of getchar(), fgetc() and getc() is int (not char).

fgets() and gets() in C language
For reading a string value with spaces, we can use either gets() or fgets() in C programming language. Here, we will see what is the difference between gets() and fgets().


fgets()
It reads a line from the specified stream and stores it into the string pointed to by str. It stops when either (n-1) characters are read, the newline character is read, or the end-of-file is reached, whichever comes first.
char *fgets(char *str, int n, FILE *stream)
str : Pointer to an array of chars where the string read is copied.
n : Maximum number of characters to be copied into str 
(including the terminating null-character).
*stream : Pointer to a FILE object that identifies an input stream.
stdin can be used as argument to read from the standard input.

returns : the function returns str

t follow some parameter such as Maximum length, buffer, input device reference.
It is safe to use because it checks the array bound.
It keep on reading until new line character encountered or maximum limit of character array.


Example : Let’s say the maximum number of characters are 15 and input length is greater than 15 but still fgets() will read only 15 character and print it.

// C program to illustrate 
// fgets() 
#include <stdio.h> 
#define MAX 15 
int main() 
{ 
    char buf[MAX]; 
    fgets(buf, MAX, stdin); 
    printf("string is: %s\n", buf); 
  
    return 0; 
} 

Input:
Hello and welcome to GeeksforGeeks

Output:
Hello and welc


gets()
Reads characters from the standard input (stdin) and stores them as a C string into str until a newline character or the end-of-file is reached.
Syntax:

char * gets ( char * str );
str :Pointer to a block of memory (array of char) 
where the string read is copied as a C string.
returns : the function returns str

It is not safe to use because it does not check the array bound.
It is used to read string from user until newline character not encountered.


Difference between getc(), getchar(), getch() and getche()
All of these functions read a character from input and return an integer value. The integer is returned to accommodate a special value used to indicate failure. The value EOF is generally used for this purpose.

getc():
It reads a single character from a given input stream and returns the corresponding integer value (typically ASCII value of read character) on success. It returns EOF on failure.

Syntax:
int getc(FILE *stream); 

Example:
// Example for getc() in C 
#include <stdio.h> 
int main() 
{ 
   printf("%c", getc(stdin)); 
   return(0); 
} 
Input: g (press enter key)
Output: g 
An Example Application : C program to compare two files and report mismatches


The difference between getc() and getchar() is getc() can read from any input stream, but getchar() reads from standard input. So getchar() is equivalent to getc(stdin).

Syntax:
int getchar(void); 

Example:
// Example for getchar() in C 
#include <stdio.h> 
int main() 
{ 
   printf("%c", getchar()); 
   return 0; 
} 
Input: g(press enter key)
Output: g 

getch():
getch() is a nonstandard function and is present in conio.h header file which is mostly used by MS-DOS compilers like Turbo C. It is not part of the C standard library or ISO C, nor is it defined by POSIX (Source: http://en.wikipedia.org/wiki/Conio.h)
Like above functions, it reads also a single character from keyboard. But it does not use any buffer, so the entered character is immediately returned without waiting for the enter key.

Syntax:
int getch();

Example:
// Example for getch() in C 
#include <stdio.h> 
#include <conio.h> 
int main() 
{ 
   printf("%c", getch());    
   return 0; 
}
Input:  g (Without enter key)
Output: Program terminates immediately.
        But when you use DOS shell in Turbo C, 
        it shows a single g, i.e., 'g'

getche()
Like getch(), this is also a non-standard function present in conio.h. It reads a single character from the keyboard and displays immediately on output screen without waiting for enter key.

Syntax:
int getche(void); 

Example:
#include <stdio.h> 
#include <conio.h> 
// Example for getche() in C 
int main() 
{ 
  printf("%c", getche()); 
  return 0; 
}
Input: g(without enter key as it is not buffered)
Output: Program terminates immediately.
        But when you use DOS shell in Turbo C, 
        double g, i.e., 'gg'

getchar_unlocked() – faster input in C/C++ for Competitive Programming


getchar_unlocked() is similar to getchar() with the exception that it is not thread safe. Below is an example code.

// A simple C program to demonstrate 
// working of getchar_unlocked() 
#include <stdio.h> 
int main() 
{ 
    // Syntax is same as getchar() 
    char c = getchar_unlocked(); 
  
    printf("Entered character is %c", c); 
  
    return 0; 
}
Input: g
Output: Entered character is g 
Following are some important points:


Since it is not thread safe, all overheads of mutual exclusion are avoided and it is faster than getchar().
Can be especially useful for competitive programming problems with “Warning: Large I/O data, be careful with certain languages (though most should be OK if the algorithm is well designed)”.

There is no issue with using getchar_unlocked() even in multithreaded environment as long as the thread using it is the only thread accessing file object
One more difference with getchar() is, it is not a C standard library function, but a POSIX function. It may not work on Windows based compilers.

It is a known fact than scanf() is faster than cin and getchar() is faster than scanf() in general. getchar_unlocked() is faster than getchar(), hence fastest of all.
Similarly, there are getc_unlocked() putc_unlocked(), and putchar_unlocked() which are non-thread-safe versions of getc(), putc() and putchar() respectively.



// A simple C program to demonstrate 
// working of putchar_unlocked() 
#include <stdio.h> 
int main() 
{ 
    // Syntax is same as getchar() 
    char c = getchar_unlocked(); 
  
    putchar_unlocked(c); 
  
    return 0; 
}
Input: g
Output: g





