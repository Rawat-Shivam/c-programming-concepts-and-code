

Inbuilt library functions for user Input | scanf, fscanf, sscanf, scanf_s, fscanf_s, sscanf_s





scanf() : The C library function int scanf (const char *format, …) reads formatted input from stdin.
Syntax:
int scanf(const char *format, ...)

Return type: Integer

Parameters:
format: string that contains the type specifier(s) 
"..." (ellipsis): indicates that the function accepts
a variable number of arguments
Each argument must be a memory address where the converted result is written to. On success, the function returns the number of variables filled. In case of an input failure, before any data could be successfully read, EOF is returned.
Type specifiers that can be used in scanf:

%c — Character
%d — Signed integer
%f — Floating point
%s — String

sscanf(): sscanf() is used to read formatted input from the string.
Syntax:
int sscanf ( const char * s, const char * format, ...);

Return type: Integer

Parameters:
s: string used to retrieve data
format: string that contains the type specifier(s)
… : arguments contains pointers to allocate 
storage with appropriate type. 

There should be at least as many of these arguments as the 
number of values stored by the format specifiers.
On success, the function returns the number of variables filled. In the case of an input failure, before any data could be successfully read, EOF is returned.

// C program to illustrate sscanf statement 
#include <stdio.h> 
  
int main () 
{ 
    // declaring array s 
    char s [] = "3 red balls 2 blue balls";  
    char str [10],str2 [10]; 
    int i; 
      
    // %*s is used to skip a word 
    sscanf (s,"%d %*s %*s %*s %s %s", &i, str, str2); 
      
    printf ("%d %s %s \n", i, str, str2); 
      
    return 0; 
} 
Output:
3 blue balls

fscanf(): fscanf() reads formatted data from file and stores it into variables.
Syntax:
int fscanf(FILE *stream, const char *format, ...)

Parameters:
Stream:  pointer to the File object that identifies the stream.
format : is a string that contains the type specifier(s)
On success, the function returns the number of variables filled. In the case of an input failure, before any data could be successfully read, EOF is returned.

// C program to illustrate sscanf statement 
// This program will run on system having the file file.txt 
#include <stdio.h> 
#include <stdlib.h> 
  
int main() 
{ 
    char s1[10], s2[10], s3[10]; 
    int year; 
      
    // file pointer 
    FILE * fp;  
      
    // opening/creation of file 
    fp = fopen ("file.txt", "w+");      
      
    // storing string in the file 
    fputs("Hello World its 2017", fp);  
      
    // sets the file position to the beginning of the file 
    rewind(fp);  
      
    // taking input from file 
    fscanf(fp, "%s %s %s %d", s1, s2, s3, &year);  
      
    printf("String1 |%s|\n", s1 ); 
    printf("String2 |%s|\n", s2 ); 
    printf("String3 |%s|\n", s3 ); 
    printf("Integer |%d|\n", year ); 
      
    // close file pointer 
    fclose(fp);      
      
    return(0); 
} 
Output:

String1 |Hello|
String2 |World|
String3 |its|
Integer |2017|

scanf() and fscanf() in C – Simple Yet Poweful
How to read only a part of the input that we need? For example, consider some input stream that contains only characters followed by an integer or a float. And we need to scan only that integer or float.
That is ,
Input: “this is the value 100”,
Output: value read is 100

Input : “this is the value 21.2”,
Output : value read is 21.2


/* C program to demonstrate that we can 
   ignore some string in scanf() */
#include <stdio.h> 
int main() 
{ 
    int a; 
    scanf("This is the value %d", &a); 
    printf("Input value read : a = %d", a); 
    return 0; 
} 
// Input  : This is the value 100 
// Output : Input value read : a = 100 


Now, assume we don’t know what the preceding characters are but we surely know that the last value is an integer. How can we scan the last value as an integer?

Below solution works only if input string has no spaces.

/* Sample C program to demonstrate use of *s */
#include<stdio.h> 
int main() 
{ 
    int a; 
    scanf("%*s %d", &a); 
    printf("Input value read : a=%d",a); 
    return 0; 
}   
// Input: "blablabla 25" 
// Output: Value read : 25 

Explanation: The %*s in scanf is used to ignore some input as required. In this case, it ignores the input until the next space or new line. Similarly if you write %*d it will ignore integers until the next space or new line.

The above fact may not seem as an useful trick at the first glance. Inorder to understand its usage, let us first see fscanf().

fscanf() : Tired of all the clumpsy syntax to read from files? well, fscanf comes to the rescue.

int fscanf(FILE *ptr, const char *format, ...) 
fscanf reads from a file pointed by the FILE pointer (ptr), instead of reading from the input stream.

Consider the following text file abc.txt

NAME    AGE   CITY
abc     12    hyderbad
bef     25    delhi
cce     65    bangalore  
Now, we want to read only the city field of the above text file, ignoring all the other fields. A combination of fscanf and the trick mentioned above does this with ease

/*c program demonstrating fscanf and its usage*/
#include<stdio.h> 
int main() 
{ 
    FILE* ptr = fopen("abc.txt","r"); 
    if (ptr==NULL) 
    { 
        printf("no such file."); 
        return 0; 
    } 
  
    /* Assuming that abc.txt has content in below 
       format 
       NAME    AGE   CITY 
       abc     12    hyderbad 
       bef     25    delhi 
       cce     65    bangalore */
    char* buf[100]; 
    while (fscanf(ptr,"%*s %*s %s ",buf)==1) 
        printf("%s\n", buf); 
  
    return 0; 
} 
Output:

CITY
hyderbad
delhi
bangalore 
Exercise: Count the number of words, characters and lines in a file using fscanf!


