

Scansets in C
scanf family functions support scanset specifiers which are represented by %[]. Inside scanset, we can specify single character or range of characters. While processing scanset, scanf will process only those characters which are part of scanset. We can define scanset by putting characters inside squre brackets. Please note that the scansets are case-sensitive.

Let us see with example. Below example will store only capital letters to character array ‘str’, any other character will not be stored inside character array.

/* A simple scanset example */
#include <stdio.h> 
int main(void) 
{ 
    char str[128]; 
  
    printf("Enter a string: "); 
    scanf("%[A-Z]s", str); 
  
    printf("You entered: %s\n", str); 
  
    return 0; 
} 
  [root@centos-6 C]# ./scan-set 
  Enter a string: GEEKs_for_geeks
  You entered: GEEK
If first character of scanset is ‘^’, then the specifier will stop reading after first occurrence of that character. For example, given below scanset will read all characters but stops after first occurrence of ‘o’

scanf("%[^o]s", str); 
Let us see with example.

/* Another scanset example with ^ */
#include <stdio.h> 
int main(void) 
{ 
    char str[128]; 
    printf("Enter a string: "); 
    scanf("%[^o]s", str); 
    printf("You entered: %s\n", str); 
    return 0; 
} 
  [root@centos-6 C]# ./scan-set 
  Enter a string: http://geeks for geeks
  You entered: http://geeks f
  [root@centos-6 C]# 

Let us implement gets() function by using scan set. gets() function reads a line from stdin into the buffer pointed to by s until either a terminating newline or EOF found.

/* implementation of gets() function using scanset */
#include <stdio.h> 
  
int main(void) 
{ 
    char str[128]; 
  
    printf("Enter a string with spaces: "); 
    scanf("%[^\n]s", str); 
  
    printf("You entered: %s\n", str); 
  
    return 0; 
} 
  [root@centos-6 C]# ./gets 
  Enter a string with spaces: Geeks For Geeks
  You entered: Geeks For Geeks
  [root@centos-6 C]# 
As a side note, using gets() may not be a good idea in general. Check below note from Linux man page.

Never use gets(). Because it is impossible to tell without knowing the data in advance how many characters gets() will read, and because gets() will continue to store characters past the end of the buffer, it is extremely dangerous to use. It has been used to break computer security. Use fgets() instead.


Difference between %d and %i format specifier in C language
A format specifier is a sequence formed by an initial percentage sign (%) indicates a format specifier, which is used to specify the type and format of the data to be retrieved from the stream and stored into the locations pointed by the additional arguments. In short it tell us which type of data to store and which type of data to print.

For example – If we want to read and print integer using scanf() and printf() function, either %i or %d is used but there is subtle difference in both %i and %d format specifier.

%d specifies signed decimal integer while %i specifies integer.

%d and %i behave similar with printf
There is no difference between the %i and %d format specifiers for printf. Consider a following example.

// C program to demonstrate 
// the behavior of %i and %d  
// with printf statement 
#include <stdio.h> 
  
int main() 
{ 
    int num = 9; 
      
    // print value using %d 
    printf("Value of num using %%d is = %d\n", num); 
      
    // print value using %i 
    printf("Value of num using %%i is = %i\n", num); 
  
    return 0; 
} 
Output:
Value of num using %d is = 9
Value of num using %i is = 9


%d and %i behavior is different in scanf.
%d assume base 10 while %i auto detects the base. Therefore, both specifiers behaves differently while they are used with an input specifier. So, 012 would be 10 with %i but 12 with %d.

%d takes integer value as signed decimal integer i.e. it takes negative values along with positive values but values should be in decimal otherwise it will print garbage value. Consider a following example.
%i takes integer value as integer value with decimal, hexadecimal or octal type.


To enter a value in hexadecimal format – value should be provided by preceding “0x” and value in octal format – value should be provided by preceding “0”.
Consider a following example.

// C program to demonstrate the difference 
// between %i and %d specifier 
#include <stdio.h> 
  
int main() 
{ 
    int a, b, c; 
  
    printf("Enter value of a in decimal format:"); 
    scanf("%d", &a); 
  
    printf("Enter value of b in octal format: "); 
    scanf("%i", &b); 
  
    printf("Enter value of c in hexadecimal format: "); 
    scanf("%i", &c); 
  
    printf("a = %i, b = %i, c = %i", a, b, c); 
  
    return 0; 
} 
Output:
Enter value of a in decimal format:12
Enter value of b in octal format: 012
Enter value of c in hexadecimal format: 0x12
a = 12, b = 10, c = 18
Explanation:
The decimal value of a as 12 is 12
The decimal value of b as 12(octal) is 10
The decimal value of c as 12(hexadecimal) is 18




