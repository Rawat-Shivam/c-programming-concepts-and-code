
Can we use function on left side of an expression in C and C++?
In C, it might not be possible to have function names on left side of an expression, but it’s possible in C++.

#include<iostream> 
using namespace std; 
/* such a function will not be safe if x is non static variable of it */
int &fun() 
{ 
   static int x;  
   return x; 
}     
int main() 
{ 
   fun() = 10; 
  
   /* this line prints 10 on screen */
   printf(" %d ", fun()); 
  
   getchar(); 
   return 0; 
} 

lvalue and rvalue in C language
L-value: “l-value” refers to memory location which identifies an object. l-value may appear as either left hand or right hand side of an assignment operator(=). l-value often represents as identifier.

Expressions referring to modifiable locations are called “modifiable l-values“. A modifiable l-value cannot have an array type, an incomplete type, or a type with the const attribute. For structures and unions to be modifiable lvalues, they must not have any members with the const attribute. The name of the identifier denotes a storage location, while the value of the variable is the value stored at that location.

An identifier is a modifiable lvalue if it refers to a memory location and if its type is arithmetic, structure, union, or pointer. For example, if ptr is a pointer to a storage region, then *ptr is a modifiable l-value that designates the storage region to which ptr points.

In C, the concept was renamed as “locator value”, and referred to expressions that locate (designate) objects. The l-value is one of the following:

The name of the variable of any type i.e, an identifier of integral, floating, pointer, structure, or union type.
A subscript ([ ]) expression that does not evaluate to an array.
A unary-indirection (*) expression that does not refer to an array
An l-value expression in parentheses.
A const object (a nonmodifiable l-value).
The result of indirection through a pointer, provided that it isn’t a function pointer.
The result of member access through pointer(-> or .)

// declare a an object of type 'int' 
int a; 
// a is an expression referring to an 
// 'int' object as l-value 
a = 1; 
int b = a; // Ok, as l-value can appear on right 
// Switch the operand around '=' operator 
9 = a; 
// Compilation error: 
// as assignment is trying to change the 
// value of assignment operator

R-value: r-value” refers to data value that is stored at some address in memory. A r-value is an expression that can’t have a value assigned to it which means r-value can appear on right but not on left hand side of an assignment operator(=).

// declare a, b an object of type 'int' 
int a = 1, b; 
 
a + 1 = b; // Error, left expression is 
           // is not variable(a + 1) 
 
// declare pointer variable 'p', and 'q' 
int *p, *q; // *p, *q are lvalue 
 
*p = 1; // valid l-value assignment 
 
// below is invalid - "p + 2" is not an l-value  
// p + 2 = 18;  
 
q = p + 5; // valid - "p + 5" is an r-value 
 
// Below is valid - dereferencing pointer 
// expression gives an l-value 
*(p + 2) = 18; 
 
p = &b;  
 
int arr[20]; // arr[12] is an lvalue; equivalent 
              // to *(arr+12) 
              // Note: arr itself is also an lvalue 
 
struct S { int m; }; 
 
struct S obj; // obj and obj.m are lvalues 
 
// ptr-> is an lvalue; equivalent to (*ptr).m 
// Note: ptr and *ptr are also lvalues 
struct S* ptr = &obj; 
Note: The unary & (address-of) operator requires an lvalue as its operand. That is, &n is a valid expression only if n is an lvalue. Thus, an expression such as &12 is an error. Again, 12 does not refer to an object, so it’s not addressable. For instance,


// declare a as int variable and 
// 'p' as pointer variable 
int a, *p; 
p = &a; // ok, assignment of address 
        // at l-value 
&a = p;    // error: &a is an r-value 
 
int x, y; 
(  x < y ? y : x) = 0; // It's valid because the ternary 
                  // expression preserves the "lvalue-ness" 
                 // of both its possible return values 


Increment (Decrement) operators require L-value Expression
What will be the output of the following program?
#include<stdio.h> 
int main() 
{ 
   int i = 10; 
   printf("%d", ++(-i)); 
   return 0; 
} 
A) 11 B) 10 C) -9 D) None
Answer: D, None – Compilation Error.
Explanation:

In C/C++ the pre-increment (decrement) and the post-increment (decrement) operators require an L-value expression as operand. Providing an R-value or a const qualified variable results in compilation error.

In the above program, the expression -i results in R-value which is operand of pre-increment operator. The pre-increment operator requires an L-value as operand, hence the compiler throws an error.

The increment/decrement operators needs to update the operand after the sequence point, so they need an L-value. The unary operators such as -, +, won’t need L-value as operand. The expression -(++i) is valid.

In C++ the rules are little complicated because of references. We can apply these pre/post increment (decrement) operators on references variables that are not qualified by const. References can also be returned from functions
